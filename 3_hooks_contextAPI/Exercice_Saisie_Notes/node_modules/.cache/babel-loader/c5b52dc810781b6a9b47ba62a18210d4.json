{"ast":null,"code":"import React, { createContext } from 'react';\nexport const NotesContext = /*#__PURE__*/createContext({});\nexport const initialState = {\n  notes: [17, 18],\n  number: '',\n  message: '',\n  average: 0\n};\nexport const MAX_NOTES = 5;\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_NUMBER\":\n      return { ...state,\n        number: action.number,\n        message: ''\n      };\n\n    case \"AVERAGE\":\n      if (state.notes.length <= 1) {\n        return { ...state,\n          message: \"Attention on ne peut pas calculer la moyenne\"\n        };\n      }\n\n      let sum = state.notes.reduce((curr, acc) => curr + acc) / state.notes.length;\n      sum = Math.floor(sum * 100) / 100;\n      return { ...state,\n        average: sum\n      };\n\n    case \"ADD_NUMBER\":\n      {\n        if (state.number.trim() === '' || isNaN(state.number)) {\n          return { ...state,\n            message: \"Attention ce n'est pas un nombre\"\n          };\n        }\n\n        if (state.notes.length >= MAX_NOTES) {\n          return { ...state,\n            message: \"Attention vous ne pouvez plus ajouter de notes\"\n          };\n        }\n\n        return { ...state,\n          notes: state.notes.concat(Number(state.number)),\n          // concat renvoie un nouveau tableau nouvelle référence\n          number: ''\n        };\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/admin/Documents/SUPPORTS COURS JS + EXERCICES/SessionREACT1/react_prof-main/semaine_01_fondamentaux/J5_Hooks/Exercice_Saisie_Notes/src/reducer/notes.js"],"names":["React","createContext","NotesContext","initialState","notes","number","message","average","MAX_NOTES","reducer","state","action","type","length","sum","reduce","curr","acc","Math","floor","trim","isNaN","concat","Number"],"mappings":"AACA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAEA,OAAO,MAAMC,YAAY,gBAAGD,aAAa,CAAC,EAAD,CAAlC;AAEP,OAAO,MAAME,YAAY,GAAG;AACxBC,EAAAA,KAAK,EAAE,CAAC,EAAD,EAAK,EAAL,CADiB;AAExBC,EAAAA,MAAM,EAAE,EAFgB;AAGxBC,EAAAA,OAAO,EAAE,EAHe;AAIxBC,EAAAA,OAAO,EAAG;AAJc,CAArB;AAOP,OAAO,MAAMC,SAAS,GAAG,CAAlB;AAEP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAEtC,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAK,YAAL;AAEI,aAAO,EACH,GAAGF,KADA;AAEHL,QAAAA,MAAM,EAAEM,MAAM,CAACN,MAFZ;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAK,SAAL;AAEI,UAAGI,KAAK,CAACN,KAAN,CAAYS,MAAZ,IAAsB,CAAzB,EAA2B;AAEvB,eAAO,EACH,GAAGH,KADA;AAEHJ,UAAAA,OAAO,EAAG;AAFP,SAAP;AAIH;;AAED,UAAIQ,GAAG,GAAGJ,KAAK,CAACN,KAAN,CAAYW,MAAZ,CAAmB,CAACC,IAAD,EAAOC,GAAP,KAAeD,IAAI,GAAGC,GAAzC,IAAgDP,KAAK,CAACN,KAAN,CAAYS,MAAtE;AACAC,MAAAA,GAAG,GAAGI,IAAI,CAACC,KAAL,CAAWL,GAAG,GAAG,GAAjB,IAAwB,GAA9B;AAEA,aAAO,EACH,GAAGJ,KADA;AAEHH,QAAAA,OAAO,EAAGO;AAFP,OAAP;;AAKJ,SAAK,YAAL;AAAmB;AAEf,YAAIJ,KAAK,CAACL,MAAN,CAAae,IAAb,OAAwB,EAAxB,IAA8BC,KAAK,CAACX,KAAK,CAACL,MAAP,CAAvC,EAAuD;AAEnD,iBAAO,EACH,GAAGK,KADA;AAEHJ,YAAAA,OAAO,EAAE;AAFN,WAAP;AAIH;;AAED,YAAII,KAAK,CAACN,KAAN,CAAYS,MAAZ,IAAsBL,SAA1B,EAAqC;AAEjC,iBAAO,EACH,GAAGE,KADA;AAEHJ,YAAAA,OAAO,EAAE;AAFN,WAAP;AAIH;;AAED,eAAO,EACH,GAAGI,KADA;AAEHN,UAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYkB,MAAZ,CAAmBC,MAAM,CAAEb,KAAK,CAACL,MAAR,CAAzB,CAFJ;AAEiD;AACpDA,UAAAA,MAAM,EAAE;AAHL,SAAP;AAKH;;AAED;AAEI,aAAOK,KAAP;AAvDR;AA0DH,CA5DM","sourcesContent":["\nimport React, { createContext } from 'react';\n\nexport const NotesContext = createContext({});\n\nexport const initialState = {\n    notes: [17, 18],\n    number: '',\n    message: '',\n    average : 0\n};\n\nexport const MAX_NOTES = 5;\n\nexport const reducer = (state, action) => {\n\n    switch (action.type) {\n\n        case \"SET_NUMBER\":\n\n            return {\n                ...state,\n                number: action.number,\n                message: ''\n            }\n\n        case \"AVERAGE\":\n\n            if(state.notes.length <= 1){\n\n                return {\n                    ...state,\n                    message : \"Attention on ne peut pas calculer la moyenne\"\n                }\n            }\n\n            let sum = state.notes.reduce((curr, acc) => curr + acc )/(state.notes.length);\n            sum = Math.floor(sum * 100) / 100;\n\n            return {\n                ...state,\n                average : sum\n            }\n\n        case \"ADD_NUMBER\": {\n\n            if (state.number.trim() === '' || isNaN(state.number)) {\n\n                return {\n                    ...state,\n                    message: \"Attention ce n'est pas un nombre\"\n                }\n            }\n\n            if (state.notes.length >= MAX_NOTES) {\n\n                return {\n                    ...state,\n                    message: \"Attention vous ne pouvez plus ajouter de notes\"\n                }\n            }\n\n            return {\n                ...state,\n                notes: state.notes.concat(Number( state.number ) ), // concat renvoie un nouveau tableau nouvelle référence\n                number: ''\n            }\n        }\n\n        default:\n\n            return state;\n    }\n\n}"]},"metadata":{},"sourceType":"module"}